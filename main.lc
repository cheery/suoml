import grammar

language = grammar.read_file("suoml.grammar")

main = ():
    parse = language.read_file("sample.fml")
    decls = parse.traverse((rule, args, loc):
        return getattr(actions, rule)(args...))

    type_env = {}
    populate_type_env(type_env)

    # Assuming that the subtyping algorithm is going to require a similar
    # treatment as the Algorithm W in order to handle recursive clauses
    # correctly. Therefore this builds the dependency graph so that the
    # SCC algorithm then sort the expressions out.
    decl_by_name = {}
    for decl in decls
        decl_by_name[decl.name] = decl
    for decl in decls
        for name in decl.free_vars
            if name in decl_by_name
                decl.depends.add(decl_by_name[name])
            elif name not in type_env
                assert false, ["not present", name]

    out = tarjan_find_scc(decls)

    visited = set()

    for name in type_env
        print(name, "::", to_raw_type(type_env[name]))

    for group in out
        if group.length != 1
            print("Error: not ready for recursive definitions yet")
            print("SCC detected:")
            for decl in group
                print(" ", decl)
            exit(1)

        decl = group.pop()
        tp = inference(Abs(decl.args, decl.body), type_env, visited)
        tp_r = reduce(tp)
        type_env[decl.name] = tp_r

        print(decl.name, "::", to_raw_type(tp_b))

    mapping = {}
    node_to_name = (node):
        try
            return mapping[node]
        except KeyError as _
            vname = (mapping.length + 10).to_string(35)
            mapping[node] = vname
            return vname

    # Skipping the graphwiz -printout because it was much more
    # trickier than reducing the types and producing a 'proper'
    # printout.
    
    # TODO: implement greedy biclique decomposition for variables.

    # http://www.graphviz.org/doc/info/attrs.html
    lines = []

    all_nodes = set()

    flow_edges = set()
    add_flow_edge = (edge...):
        return if edge in flow_edges
        flow_edges.add(edge)
        q, p = edge
        all_nodes.add(p)
        all_nodes.add(q)
        pn = node_to_name(p)
        qn = node_to_name(q)
        lines.append(qn ++ " -> " ++ pn ++ ";")
        
    # "p -> q" is flow edge.

    for p,q in visited
        all_nodes.add(p)
        all_nodes.add(q)
        pn = node_to_name(p)
        qn = node_to_name(q)
        lines.append(pn ++ " -> " ++ qn ++ " [dir=none];")

        for w in p.flow
            add_flow_edge(w, p)
        for w in q.flow
            add_flow_edge(q, w)

    for v in all_nodes
        vn = node_to_name(v)
        lines.append(vn ++ "[label="
            ++ repr(" ".join(v.heads)) ++ "];")

        for label, ws in v.p_transitions.items()
            for w in ws
                wn = node_to_name(w)
                lines.append(vn ++ " -> " ++ wn
                    ++ " [label=" ++ repr(repr(label)) ++ "];")
        for label, ws in v.n_transitions.items()
            for w in ws
                wn = node_to_name(w)
                lines.append(vn ++ " -> " ++ wn
                    ++ " [label=" ++ repr(repr(label)) ++ "];")

    #print("digraph inference {\n" ++ "\n".join(lines) ++ "\n}")

populate_type_env = (type_env):
    print_t = Node(+1)
    arg_t = Node(-1)
    arg_t.heads.add("string")
    print_t.add_transition(["dom", 0], arg_t)
    result_t = Node(+1)
    result_t.heads.add("null")
    print_t.add_transition(["cod"], result_t)
    print_t.heads.add("->")
    type_env['print'] = print_t

inference = (a, type_env, visited):
    if isinstance(a, Abs)
        type_env = dict(type_env)
        ports = []
        for arg in a.args
            port = new_port()
            ports.append(port)
            type_env[arg] = port.output
        result = inference(a.body, type_env, visited)
        functype = Node(+1)
        for i in range(ports.length)
            functype.add_transition(
                ["dom", i], ports[i].input)
        functype.add_transition(["cod"], result)
        functype.heads.add("->")
        return functype
    if isinstance(a, App)
        lhs_t = inference(a.lhs, type_env, visited)
        calltype = Node(-1)
        calltype.heads.add("->")
        i = 0
        for arg in a.args
            calltype.add_transition(
                ["dom", i], inference(arg, type_env, visited))
            i += 1
        result = new_port()
        calltype.add_transition(
            ["cod"], result.input)
        biunify([lhs_t, calltype], visited)
        return result.output
    if isinstance(a, Let)
        lhs_t = inference(a.lhs, type_env, visited)
        type_env = dict(type_env)
        type_env[a.name] = lhs_t
        return inference(a.rhs, type_env, visited)
    if isinstance(a, Var)
        return replicate(type_env[a.name])
    if isinstance(a, Lit)
        result = Node(+1)
        result.heads.add(a.type)
        return result
    assert false, ["unable to inference", a]

reduce = (node):
    subsets = {} 
    flow_sets = {}

    reduce_subset = (pol, subset):
        if subset in subsets
            return subsets[subset]
        subsets[subset] = s = Node(pol)
        for n in subset
            s.heads.update(n.heads)
            try
                flow_sets[n].add(s)
            except KeyError as _
                flow_sets[n] = [s]
            for label, ws in n.p_transitions.items()
                for w in ws
                    s.add_transition(label, w)
            for label, ws in n.n_transitions.items()
                for w in ws
                    s.add_transition(label, w)

        p_transitions = {}
        for label, ws in s.p_transitions.items()
            p_transitions[label] = set([reduce_subset(pol, ws)])
        s.p_transitions = p_transitions

        n_transitions = {}
        for label, ws in s.n_transitions.items()
            n_transitions[label] = set([reduce_subset(-pol, ws)])
        s.n_transitions = n_transitions

        return s

    root = reduce_subset(node.pol, set([node]))
    for node, s in flow_sets.items()
        continue if node.pol > 0
        for w in node.flow
            ss = flow_sets.get(w)
            if ss
                s.add_flow(ss)
    return root

to_raw_type = (node):

    get_raw_type = (node):
        if node.pol > 0
            typedecl = ["+"]
        else
            typedecl = ["-"]
        for head in node.heads
            typedecl.append(head)
        for label, ws in node.p_transitions.items()
            assert ws.length == 1
                "to_raw_type() only works on reduced type forms"
            w = iter(ws).next()
            typedecl.append([label] ++ get_raw_type(w))
        for label, ws in node.n_transitions.items()
            assert ws.length == 1
                "to_raw_type() only works on reduced type forms"
            w = iter(ws).next()
            typedecl.append([label] ++ get_raw_type(w))
        return typedecl
    return get_raw_type(node)



replicate = (node):
    mapping = {}
    copy_node = (n):
        try
            return mapping[n]
        except KeyError as _
            mapping[n] = m = Node(n.pol)
            m.heads.update(n.heads)
            for w in n.flow
                m.flow.add(copy_node(w))
            for label, ws in n.p_transitions.items()
                for w in ws
                    m.add_transition(label, copy_node(w))
            for label, ws in n.n_transitions.items()
                for w in ws
                    m.add_transition(label, copy_node(w))
            return m
    return copy_node(node)




new_port = ():
    input = Node(-1)
    output = Node(+1)
    input.add_flow(output)
    return (input=input, output=output)

class Node
    +init = (self, pol=+1):
        self.pol = pol
        self.heads = set()
        self.flow = set()
        self.p_transitions = {}
        self.n_transitions = {}

    add_flow = (self, other):
        assert self.pol != other.pol
        self.flow.add(other)
        other.flow.add(self)

    add_transition = (self, label, port):
        if port.pol == self.pol
            transitions = self.p_transitions
        else
            transitions = self.n_transitions
        try
            transitions[label].add(port)
        except KeyError as _
            transitions[label] = set([port])

merge = (dst, src):
    assert dst.pol == src.pol
    for head in src.heads
        dst.heads.add(head)
    for v in src.flow
        dst.add_flow(v)
    for label, vs in src.p_transitions.items()
        try
            dst.p_transitions[label].update(vs)
        except KeyError as _
            dst.p_transitions[label] = set(vs)
    for label, vs in src.n_transitions.items()
        try
            dst.n_transitions[label].update(vs)
        except KeyError as _
            dst.n_transitions[label] = set(vs)

biunify = (pair, visited):
    return if pair in visited
    visited.add(pair)
    p, q = pair
    assert p.pol > q.pol, "biunify must have form (+p, -q)"

    # Check that subtyping constraints hold
    for x in p.heads
        for y in q.heads
            assert is_subtype(x, y), ["type error", x, y]

    # Rewrites the graph, eliminating the constraint
    for s in q.flow
        merge(s, p)
    for s in p.flow
        merge(s, q)

    # Constraint decomposition
    for label, ss in p.p_transitions.items()
        uu = q.p_transitions.get(label, [])
        for s in ss
            for u in uu
                biunify([s,u], visited)
    for label, ss in p.n_transitions.items()
        uu = q.n_transitions.get(label, [])
        for u in uu
            for s in ss
                biunify([u,s], visited)

is_subtype = (x, y):
    if x == y
        return true
    return false


# The SCC finding is likely necessary for handling recursion.
# For now we use it to detect recursion so it fails before causing issues.
# https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm
# TODO: improve the comments to explain the algorithm.
tarjan_find_scc = (decls):
    index = 0
    s = []
    output = []

    strong_connect = (decl):
        # set depth index for v to the smallest unused index
        decl.index = index
        decl.lowlink = index
        index += 1
        s.append(decl)
        decl.on_stack = true

        # consider successors of v
        for w in decl.depends
            if w.index == null # successor not visited yet
                strong_connect(w)
                decl.lowlink = min(decl.lowlink, w.lowlink)
            elif w.on_stack
                # successor w is in stack S, in the current SCC
                # Note: The next line may look odd - but is correct.
                # It says w.index not w.lowlink; that is deliberate and from the original paper
                decl.lowlink = min(decl.lowlink, w.index)
            # if w is not on stack, then (v,w) is a cross-edge in the DFS and
            #    must be ignored.
        # If v is a root node, pop the stack and generate an SCC
        if decl.lowlink == decl.index
            scc = set()
            w = null
            while w != decl
                w = s.pop()
                w.on_stack = false
                scc.add(w)
            output.append(scc)

    for decl in decls
        if decl.index == null
            strong_connect(decl)
    return output

class Def
    +init = (self, name, args, body):
        self.name = name
        self.args = args
        self.body = body
        self.free_vars = free_vars(body)
        self.depends = set()

        # For tarjan find SCC
        self.index = null
        self.lowlink = null
        self.on_stack = false

    +repr = (self):
        return repr(["Def", self.name, self.args, self.body])

free_vars = (a):
    if isinstance(a, Let)
        r = free_vars(a.rhs)
        r.discard(a.name)
        r.update( free_vars(a.lhs) )
        return r
    if isinstance(a, Abs)
        r = free_vars(a.body)
        for arg in a.args
            r.discard(arg)
        return r
    if isinstance(a, App)
        r = free_vars(a.lhs)
        for arg in a.args
            r.update(free_vars(arg))
        return r
    if isinstance(a, Var)
        return set([a.name])
    if isinstance(a, Lit)
        return set()
    assert false, ["free vars for?", a]

class Let
    +init = (self, name, lhs, rhs):
        self.name = name
        self.lhs = lhs
        self.rhs = rhs

    +repr = (self):
        return repr(["Let", self.name, self.lhs, self.rhs])

class Abs
    +init = (self, args, body):
        self.args = args
        self.body = body

    +repr = (self):
        return repr(["Abs", self.args, self.body])

class App
    +init = (self, lhs, args):
        self.lhs = lhs
        self.args = args

    +repr = (self):
        return repr(["App", self.lhs, self.args])

class Var
    +init = (self, name):
        self.name = name

    +repr = (self):
        return self.name

class Lit
    +init = (self, value, type):
        self.value = value
        self.type = type

    +repr = (self):
        return repr(["Lit", self.value, self.type])

actions = object({
    def = Def
    let = Let
    abs = Abs
    app = App
    var = Var
    string = (val):
        return Lit(val, "string")
    int = (val):
        return Lit(val, "int")
})
