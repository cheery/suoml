import grammar
import types

# TODO: Modify the design to handle coercive subtyping through special node in operators.

# TODO: Figure out machinery for declaring new abstract datatypes.

# The SCC finding is likely necessary for handling recursion.
from graph_utils import
    tarjan_find_scc,
    greedy_biclique_decomposition

language = grammar.read_file("suoml.grammar")

main = ():
    actions = object({
        def = Def
        app = App
        let = Let
        abs = Abs
        if_then_else = IfThenElse
        var = Var
        string = (val):
            return Lit(val, types.t_string)
        int = (val):
            return Lit(val, types.t_int)
        rational = (val):
            return Lit(val, types.t_rational)
    })
    parse = language.read_file("sample.fml")
    decls = parse.traverse((rule, args, loc):
        return getattr(actions, rule)(args...))

    declared = {}

    # We could use builtin function header here without
    # causing any issues, since we can use simple headers to
    # illustrate this system, we do so.
    f = types.State(+1)
    z = types.State(-1)
    r = types.State(+1)
    z.heads.add(types.t_string)
    r.heads.add(types.t_unit)
    f.heads.add(types.get_function_header(1))
    f.add_transition(types.dom[0], z)
    f.add_transition(types.cod, r)
    declared['print'] = generalize(f, null)

    f = types.State(+1)
    f.heads.add(types.t_add)
    declared['add'] = generalize(f, null)

    f = types.State(+1)
    f.heads.add(types.t_sub)
    declared['sub'] = generalize(f, null)

    f = types.State(+1)
    f.heads.add(types.t_call)
    declared['call'] = generalize(f, null)

    f = types.State(+1)
    f.heads.add(types.t_gt)
    declared['gt'] = generalize(f, null)


    namespace = {}
    for decl in decls
        namespace[decl.name] = decl

    dependency_graph = {}
    constraints_graph = {}
    for decl in decls
        constraints = []
        dependencies = set()
        constraint_generation(decl, constraints, dependencies, declared, {})
        dependency_graph[decl.name] = dependencies
        constraints_graph[decl.name] = constraints

    scc = tarjan_find_scc(dependency_graph)

    for group in scc
        is_rec = group_is_recursive(group, dependency_graph)
        solve_constraints(declared, group, is_rec, constraints_graph)

    for name, scheme in declared.items()
        print(name, "::", to_raw_type(scheme))

constraint_generation = (a, cn, dep, declared, env):
    if isinstance(a, Def)
        ab = Abs(a.args, a.body)
        result = constraint_generation(ab, cn, dep, declared, env)
        cn.append(['def', a.name, result])
        return result
    if isinstance(a, Abs)
        env = dict(env)
        args = []
        for arg in a.args
            input, output = new_port(cn, true)
            env[arg] = output
            args.append(input)
        body = constraint_generation(a.body, cn, dep, declared, env)
        return ['function', args, body]
    if isinstance(a, App)
        lhs = constraint_generation(a.lhs, cn, dep, declared, env)
        args = [lhs]
        for arg in a.args
            arg = constraint_generation(arg, cn, dep, declared, env)
            args.append(arg)
        input, output = new_port(cn)
        cn.append(['call', args, input])
        return output
    if isinstance(a, Var)
        if a.name in env
            return env[a.name]
        if a.name not in declared
            dep.add(a.name)
        return ['instantiate', a.name]
    if isinstance(a, Lit)
        return ['literal', a.type]
    if isinstance(a, IfThenElse)
        cond = constraint_generation(a.cond, cn, dep, declared, env)
        cn.append(['<:', cond, ['literal', types.t_bool]])
        t = constraint_generation(a.t, cn, dep, declared, env)
        f = constraint_generation(a.f, cn, dep, declared, env)
        input, output = new_port(cn)
        cn.append(['<:', t, input])
        cn.append(['<:', f, input])
        return output
    # This system can provide full let-polymorphism, but I left
    # left that feature away because it requires you to track
    # the free variables in the code.
    if isinstance(a, Let)
        lhs = constraint_generation(a.lhs, cn, dep, declared, env)
        env = dict(env)
        env[a.name] = lhs
        return constraint_generation(a.rhs, cn, dep, declared, env)
    assert false, ["implement constraint_generation", a]

new_port = (cn, free=false):
    input = types.State(-1)
    output = types.State(+1)
    cn.append(['port', input, output])
    return [input, output]

group_is_recursive = (group, dependency_graph):
    if group.length == 1
        name = list(group)[0]
        return name in dependency_graph[name]
    else
        return true

solve_constraints = (declared, group, is_rec, constraints_graph):
    visited = set()
    constraints = []
    for name in group
        constraints.extend(constraints_graph[name])
    if is_rec
        free  = set()
        ports = {}
        env = dict(declared)
        for name in group
            port = types.new_port(free)
            ports[name] = port
            env[name] = generalize(port.output, free)
        for name, result in run_constraints(constraints, env, visited)
            types.biunify([result, ports[name].input], visited)
        for name in group
            declared[name] = generalize(ports[name].output, null)
    else
        for name, result in run_constraints(constraints, declared, visited)
            declared[name] = generalize(result, null)

run_constraints = (constraints, declared, visited):
    for c in constraints
        which = c[0]
        if which == "port"
            c[1].add_flow(c[2])
        elif which == "call"
            args = []
            for arg in c[1]
                args.append(build_node(arg, declared, visited))
            port = c[2]

            op_site = types.new_operator(types.t_call, [0], args.length)
            sink = types.new_port()
            sink.input.heads.add(types.SinkHeader(0, op_site))

            calltype = types.State(-1)
            calltype.heads.add(op_site.expect)
            calltype.add_transition(types.dom[0], sink.output)
            i = 1
            for arg in args[1 .:]
                calltype.add_transition(types.dom[i], arg)
                i += 1
            calltype.add_transition(types.cod, c[2])
            sink.input.add_transition(op_site.edge, calltype)

            types.biunify([args[0], sink.input], visited)
        elif which == "<:"
            o = build_node(c[1], declared, visited)
            i = build_node(c[2], declared, visited, -1)
            types.biunify([o, i], visited)
        elif which == "def"
            yield [c[1], build_node(c[2], declared, visited)]
        else
            assert false, which

build_node = (node_desc, declared, visited, pol=+1):
    if isinstance(node_desc, types.State)
        return node_desc
    if node_desc[0] == "instantiate"
        scheme = instantiate_type(declared[node_desc[1]])
        return scheme.root
    if node_desc[0] == "literal"
        result = types.State(pol)
        result.heads.add(node_desc[1])
        return result
    if node_desc[0] == "function"
        args = node_desc[1]
        resu = node_desc[2]
        functype = types.State(pol)
        functype.heads.add(types.get_function_header(args.length))
        for i in range(args.length)
            functype.add_transition(types.dom[i], args[i])
        functype.add_transition(types.cod, resu)
        return functype
    assert false, node_desc

# Remember that for subtyping, type variables represent flows.
# This means that only-covariant or only-contravariant type variables
# do not really convey useful information.
to_raw_type = (scheme):
    flow_variables = greedy_biclique_decomposition(
        scheme.generic,
        (vertex):
            return vertex.flow)

    visi = set()
    mapi = {}
    rvar_id = 0

    # 'trail' used to be a set, but I wanted type annotations that
    # truthfully display what's going on under.
    trail = {}

    s_visit = (state, in_trail):
        assert state in scheme.generic
        if state in visi
            sym = "rec.r" ++ (rvar_id).to_string()
            mapi[state] = "let.r" ++ (rvar_id).to_string()
            rvar_id += 1
            return sym
        visi.add(state)

        if state.pol > 0
            operator = " | "
        else
            operator = " & "

        typedecl = []
        for head in state.heads
            # TODO: Sink headers should get different treatment,
            #       For now we hide them.
            if isinstance(head, types.SinkHeader)
                name = repr(head.site.op)
                w = k_visit(state, head.site.edge)
                if w not in visi
                    line = s_visit(w, true)
                    trail[w] = "\n  " ++ name ++ " : " ++ line
                if name not in typedecl
                    typedecl.append(name)
                continue
            typedecl.append(r_visit(head, state, in_trail))
        for v in flow_variables[state]
            typedecl.append("a" ++ (v).to_string())

        if state in mapi
            typedecl.insert(0, mapi.pop(state))
        visi.discard(state)
        return "(" ++ operator.join(typedecl) ++ ")"

    r_visit = (head, state, in_trail):
        px = {}
        for edge in head.params()
            px[edge] = e_visit(state, edge, in_trail)
        return head.stringify(px)

    e_visit = (state, edge, in_trail):
        w = k_visit(state, edge)
        return s_visit(w, in_trail)

    k_visit = (state, edge):
        if edge not in state.transitions
            return "(error)"
        ws = state.transitions[edge]
        if ws.length == 0
            return "()"
        assert ws.length == 1, "not a reduced type form"
        return list(ws)[0]

    return s_visit(scheme.root, false) ++ "".join(trail.values())

# The generalize recalculates the 'free' state sets in the environment by
# extending it. Then it runs a subset construction that takes everything
# not in 'free' and constructs a new graph. 'generic' ends up labeling the
# states present in this new sub-graph.
generalize = (root, free=set()):
    # env_free fills up while this is going on.
    for state in free
        for w in state.flow
            free.add(w)
        for edge, ws in state.transitions.items()
            for w in ws
                free.add(w)

    # subsets : {set(Node) : Node}
    # membership : {Node : set(Node)}
    subsets = {}
    membership = {}

    reduce_site_port = (port):
        return reduce_subset(port.pol, set([port]))
    reduce_subset = (pol, subset):
        if subset in subsets
            return subsets[subset]
        subsets[subset] = s = types.State(pol)
        rw_edge = {}
        for n in subset
            assert n not in free, "bug: subset must not contain free states"
            for head in n.heads
                if isinstance(head, types.SinkHeader)
                    site = head.site.transfer(reduce_site_port)
                    rw_edge[head.site.edge] = site.edge
                    head = types.SinkHeader(head.index, site)
                s.heads.add(head)
            try
                membership[n].append(s)
            except KeyError as _
                membership[n] = [s]
            for edge, ws in n.transitions.items()
                for w in ws
                    s.add_transition(edge, w)

        transitions = {}
        for edge, ws in s.transitions.items()
            edge = rw_edge.get(edge, edge)
            extern = set()
            for w in ws
                if w in free
                    extern.add(w)
            ws.difference_update(extern)
            transitions[edge] = set([reduce_subset(pol*edge.pol, ws)]) | extern
        s.transitions = transitions
        return s

    if root in free
        return (generic=set(), root=root)
    root = reduce_subset(root.pol, set([root]))
    for state, ss in membership.items()
        continue if state.pol > 0
        for w in state.flow
            assert w not in free, "bug: free state that is not marked free"
            qq = membership.get(w, [])
            for s in ss
                for q in qq
                    s.add_flow(q)
    return (generic=set(subsets.values()), root=root)

instantiate_type = (scheme):
    mapping = {}
    copy_state = (n):
        return n if n not in scheme.generic
        try
            return mapping[n]
        except KeyError as _
            mapping[n] = m = types.State(n.pol)
            rw_edge = {}
            for head in n.heads
                if isinstance(head, types.SinkHeader)
                    site = head.site.transfer(copy_state)
                    rw_edge[head.site.edge] = site.edge
                    head = types.SinkHeader(head.index, site)
                m.heads.add(head)
            for w in n.flow
                m.flow.add(copy_state(w))
            for edge, ws in n.transitions.items()
                edge = rw_edge.get(edge, edge)
                for w in ws
                    m.add_transition(edge, copy_state(w))
            return m
    root = copy_state(scheme.root)
    return (root=root)

class Def
    +init = (self, name, args, body):
        self.name = name
        self.args = args
        self.body = body

class App
    +init = (self, lhs, args):
        self.lhs = lhs
        self.args = args

class Let
    +init = (self, name, lhs, rhs):
        self.name = name
        self.lhs = lhs
        self.rhs = rhs

class Abs
    +init = (self, args, body):
        self.args = args
        self.body = body

class IfThenElse
    +init = (self, cond, t, f):
        self.cond = cond
        self.t = t
        self.f = f

class Var
    +init = (self, name):
        self.name = name

class Lit
    +init = (self, value, type):
        self.value = value
        self.type = type
