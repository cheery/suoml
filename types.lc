# So here I have it. Biunification with coercive operators.

# TODO: Abstraction for callable objects.
#       Provide a way to create new abstract types.

# sinkheader for callable.. (0)
# So now the implementation has to supply op_callable with real
# function.
# 
# s = (callee, arg_0, arg_1, arg_2) -> cod
# op_site = OperatorSite(op_call, [0], get_function_header(4))
# callee <: sink(0, op_site, s)

# So arg3 function got to return 4-argc op_call

# So operator 'call' would get (op_call, expected)
# It can then derive the function signature shape that satisfies it.

# This seemed really odd at the time of discovery. I am not sure
# it works or is solid, but we will try it.

# 'call' is special in that it responds to the 'expected' -shape.
# other operators should just return their true shape.
# (op_add, a&sink(0, A), b&sink(1, A)) -> c
#   A = (+) (a, b) -> c
#   OperatorSite(op_add, [0,1], get_function_header(2))

# Operator table is bunch of responders.
# And callables are valid responders.

class Header
    +init = (self, name):
        self.name = name
    +repr = (self):
        return self.name

class SimpleHeader
    +init = (self, name):
        self.name = name
    +repr = (self):
        return self.name

    params = (self):
        return []
    stringify = (self):
        return self.name

t_call = SimpleHeader('call')
t_add = SimpleHeader('add')
t_sub = SimpleHeader('sub')

t_gt = SimpleHeader('gt')

#class Interface extends Header
#    +init = (self):
#        null
#
#    face = (self):
#        return self

binary_operator = (op, head, expect):
    if op == t_call and isinstance(head, FunctionHeader)
        f = State(+1)
        f.heads.add(expect)
        z = State(-1)
        z.heads.add(get_function_header(expect.argc - 1))

        f.add_transition(dom[0], z)
        for i in range(1, expect.argc)
            port = new_port()
            z.add_transition(dom[i-1], port.output)
            f.add_transition(dom[i], port.input)
        port = new_port()
        z.add_transition(cod, port.input)
        f.add_transition(cod, port.output)
        return f
    if op == t_call and head == t_call
        f = State(+1)
        f.heads.add(expect)
        z = State(-1)
        z.heads.add(head)
        f.add_transition(dom[0], z)

        callsite = new_callsite(t_call, [0], expect.argc-1)
        for i in range(1, expect.argc)
            for w in callsite.transitions[dom[i-1]]
                f.add_transition(dom[i], w)
        for w in callsite.transitions[cod]
            f.add_transition(cod, w)
        return f
    if op == t_call and head in [t_add,t_sub] and expect.argc == 3
        return new_callsite(head, [1, 2], 3)

    if op == t_call and head == t_gt and expect.argc == 3
        return new_callsite(head, [1, 2], 3)

    if op in [t_add,t_sub] and head == t_rational
        f = State(+1)
        f.heads.add(get_function_header(3))
        z1 = State(-1)
        z1.heads.add(t_rational)
        z2 = State(-1)
        z2.heads.add(t_rational)
        r = State(+1)
        r.heads.add(t_rational)
        f.add_transition(dom[0], State(-1))
        f.add_transition(dom[1], z1)
        f.add_transition(dom[2], z2)
        f.add_transition(cod, r)
        return f

    if op in [t_add,t_sub] and head == t_int
        f = State(+1)
        f.heads.add(get_function_header(3))
        z1 = State(-1)
        z1.heads.add(t_int)
        z2 = State(-1)
        z2.heads.add(t_int)
        r = State(+1)
        r.heads.add(t_int)
        f.add_transition(dom[0], State(-1))
        f.add_transition(dom[1], z1)
        f.add_transition(dom[2], z2)
        f.add_transition(cod, r)
        return f
    if op in [t_gt] and head == t_int
        f = State(+1)
        f.heads.add(get_function_header(3))
        z1 = State(-1)
        z1.heads.add(t_int)
        z2 = State(-1)
        z2.heads.add(t_int)
        r = State(+1)
        r.heads.add(t_bool)
        f.add_transition(dom[0], State(-1))
        f.add_transition(dom[1], z1)
        f.add_transition(dom[2], z2)
        f.add_transition(cod, r)
        return f
    assert false, [op, head, expect]

simple_coercion = (a, b):
    if a == b
        f = State(+1)
        f.heads.add(get_function_header(1))
        z = State(-1)
        z.heads.add(a)
        r = State(+1)
        r.heads.add(b)
        for edge in a.params()
            p = State(+edge.pol)
            q = State(-edge.pol)
            p.add_flow(q)
            r.add_transition(edge, p)
            z.add_transition(edge, q)
        f.add_transition(dom[0], z)
        f.add_transition(cod, r)
        return f
    if a == t_int and b == t_rational
        f = State(+1)
        f.heads.add(get_function_header(1))
        z = State(-1)
        z.heads.add(a)
        r = State(+1)
        r.heads.add(b)
        f.add_transition(dom[0], z)
        f.add_transition(cod, r)
        return f

    assert false, ['coercion', a,b]

unique_coercion = (heads):
    s = []
    for y in heads
        ok = true
        for x in heads
            ok = ok and (x == y or has_coercion(x, y))
        if ok
            s.append(y)
    assert s.length == 1, ["bad coercion", list(heads), s]
    return s[0]

t_string = SimpleHeader('string')
t_bool   = SimpleHeader('bool')
t_unit   = SimpleHeader('unit')
t_int = SimpleHeader("int")
t_rational = SimpleHeader("rational")

has_coercion = (x, y):
    if x == t_int and y == t_rational
        print('  tried', x, y)
        return true
    print('! tried', x, y)
    return false

class State
    +init = (self, pol=+1):
        self.pol = pol
        self.heads = set()
        self.flow = set()
        self.transitions = {}
        self.site = null

    add_head = (self, head, cc):
        if self.site
            l = self.heads.length
            self.heads.add(head)
            if l < self.heads.length
                cc.append([self.site, self, head])
        else
            self.heads.add(head)

    add_flow = (self, other):
        assert self.pol != other.pol, "polarity conflict"
        self.flow.add(other)
        other.flow.add(self)

    add_transition = (self, edge, state):
        assert (edge.pol > 0) == (self.pol == state.pol),
            ["polarity conflict", self.pol, edge.pol, state.pol]
        try
            self.transitions[edge].add(state)
        except KeyError as _
            self.transitions[edge] = set([state])

class OperatorSite
    +init = (self, op, expect, states, activations):
        self.op = op
        self.expect = expect
        self.states = states
        self.activations = activations

    copy = (self, fn):
        op = self.op
        expect = self.expect
        states = {}
        activations = {}
        n_site = OperatorSite(op, expect, states, activations)
        for edge, state in self.states.items()
            states[edge] = n_state = fn(state)
            if state.site == self
                n_state.site = n_site
        for head, activation in self.activations.items()
            activations[head] = activation.copy(fn)
        return n_site

class Activation
    +init = (self, head, state, coerce):
        self.head = head     # head
        self.state = state   # State(+1)
        self.coerce = coerce # set([head, index])

    copy = (self, fn):
        head = self.head
        state = fn(self.state)
        coerce = self.coerce
        return Activation(head, state, coerce)

class Edge
    +init = (self, pol):
        self.pol = pol

class EdgeGroup
    +init = (self, pol):
        self.pol = pol
        self.edges = {}

    +getitem = (self, index):
        try
            return self.edges[index]
        except KeyError as _
            self.edges[index] = edg = Edge(self.pol)
            return edg

class FunctionHeader
    +init = (self, argc):
        self.argc = argc

    params = (self):
        for i in range(self.argc)
            yield dom[i]
        yield cod
    stringify = (self, x):
        if self.argc == 1
            return x[dom[0]] ++ " -> " ++ x[cod]
        a = []
        for i in range(self.argc)
            a.append(x[dom[i]])
        return "(" ++ ", ".join(a) ++ ") -> " ++ x[cod]

    +repr = (self):
        return "FunctionHeader(" ++ self.argc.to_string() ++ ")"

func_headers = {}
get_function_header = (argc):
    try
        return func_headers[argc]
    except KeyError as _
        func_headers[argc] = head = FunctionHeader(argc)
        return head

cod = Edge(+1)
dom = EdgeGroup(-1)

biunify = (pair, visited):
    if pair in visited
        return
    visited.add(pair)
    p, q = pair
    assert isinstance(p, State) and isinstance(q, State), [p,q]
    assert p.pol > q.pol, "polarity conflict"

    for x in p.heads
        for y in q.heads
            assert x == y, ["type error", x, y]

    cc = []
    for s in q.flow
        merge(s, p, cc)
    for s in p.flow
        merge(s, q, cc)

    for edge, ws in p.transitions.items()
        wu = q.transitions.get(edge, {})
        if edge.pol > 0
            for s in ws
                for u in wu
                    biunify([s, u], visited)
        else
            for s in ws
                for u in wu
                    biunify([u, s], visited)

    for site, sink, head in cc
        update_coercion(site, sink, head, visited)

merge = (dst, src, cc):
    assert dst.pol == src.pol, "polarity conflict"
    for head in src.heads
        dst.add_head(head, cc)
    for state in src.flow
        dst.add_flow(state)
    for edge, ws in src.transitions.items()
        try
            dst.transitions[edge].update(ws)
        except KeyError as _
            dst.transitions[edge] = set(ws)

new_port = (graph=null):
    input = State(-1)
    output = State(+1)
    input.add_flow(output)
    if graph
        graph.add(input)
        graph.add(output)
    return (input=input, output=output)

new_callsite = (op, indices, argc):
    expect = get_function_header(argc)
    states = {}
    activations = {}
    site = OperatorSite(op, expect, states, activations)

    callsite = State(+1)
    callsite.heads.add(expect)
    for i in range(argc)
        if i in indices
            sink = State(+1)
            sink.site = site
        else
            sink = State(+1)
        arg = State(-1)
        arg.add_flow(sink)
        states[dom[i]] = sink
        callsite.add_transition(dom[i], arg)
    sink = State(-1)
    out = State(+1)
    out.add_flow(sink)
    states[cod] = sink
    callsite.add_transition(cod, out)
    return callsite

update_coercion = (site, pivot, head, visited):
    k = set([set([head])])
    doms = set()
    for edge, sink in site.states.items()
        continue if sink.site != site
        doms.add(edge)
        continue if sink == pivot
        n = set()
        for t in sink.heads
            for h in k
                n.add(h.union([t]))
        k = n
    # k contains all the cartesian sets introduced by the new head.
    # doms contains all domain edges that coerce.

    # Every new cartesian produces a potential new coercion.
    for heads in k
        coercions = set()
        # 'unique_coercion' determines the new target type.
        # it may fail, but in real implementation there
        # might be a default function listed for the operator.
        target = unique_coercion(heads)
        for edge in doms
            sink = site.states[edge]
            if sink == pivot
                coercions.add([head, edge])
            else
                for h in sink.heads
                    if h in heads
                        coercions.add([h, edge])
        # Coercion is not re-applied if it has been already done.
        if target in site.activations
            activation = site.activations[target]
        else
            state = binary_operator(site.op, target, site.expect)
            assert state.heads == set([site.expect])
                "type error"
            activation = Activation(target, state, set())

            for edge, state in site.states.items()
                continue if edge in doms
                if edge.pol > 0
                    for w in activation.state.transitions[edge]
                        biunify([w, state], visited)
                else
                    for w in activation.state.transitions[edge]
                        biunify([state, w], visited)
        for h, edge in coercions
            continue if [h, edge] in activation.coerce
            activation.coerce.add([h, edge])
            k = simple_coercion(h, target)
            assert k.heads == set([get_function_header(1)])
                "type error"
            # Removing heads from the domain.
            for w in k.transitions[dom[0]]
                w.heads.clear()
            sink = site.states[edge]
            for w in k.transitions[dom[0]]
                biunify([sink, w], visited)
            for w in k.transitions[cod]
                for d in activation.state.transitions[edge]
                    biunify([w, d], visited)
