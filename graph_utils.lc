# Utilities for handling graphs

greedy_biclique_decomposition = (graph, get_edges):
    flow_edges = {}
    flow_variables = {}

    for vertex in graph
        edges = set()
        for w in get_edges(vertex)
            if w in graph
                edges.add(w)
        flow_edges[vertex] = edges
        flow_variables[vertex] = []

    var_id = 0
    best_score = 1
    while best_score > 0
        best_biclique = null
        best_score = 0
        for vertex in graph
            a = flow_edges[vertex]
            if a.length == 0 # No biclique here.
                continue
            it = iter(a)
            b = set(flow_edges[it.next()])
            for w in it
                b.intersection_update(flow_edges[w])
            score = a.length * b.length
            if best_score < score
                best_score = score
                best_biclique = [a,b]
        if best_biclique
            a,b = best_biclique
            for n in a
                flow_variables[n].append(var_id)
                flow_edges[n].difference_update(b)
            for n in b
                flow_variables[n].append(var_id)
                flow_edges[n].difference_update(a)
            var_id += 1
    return flow_variables

# https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm
tarjan_find_scc = (graph):
    table = {}
    index = 0
    stack = []
    output = []

    strong_connect = (vertex):
        # set depth index for v to the smallest unused index
        stack.append(vertex)
        table[vertex] = v = (index=index, lowlink=index, on_stack=true)
        index += 1
        # consider successors of v
        for succ_vertex in graph[vertex]
            w = table.get(succ_vertex)
            if w == null # not visited
                w = strong_connect(succ_vertex)
                v.lowlink = min(v.lowlink, w.lowlink)
            elif w.on_stack
                v.lowlink = min(v.lowlink, w.index)
            # otherwise, if w is not in stack, then (v,w) is a cross-edge
            # in DFS and must be ignored.
        # If v is a root node, pop the stack and generate an SCC
        if v.lowlink == v.index
            scc = set()
            p_vertex = stack.pop()
            scc.add(p_vertex)
            table[p_vertex].on_stack = false
            while p_vertex != vertex
                p_vertex = stack.pop()
                scc.add(p_vertex)
                table[p_vertex].on_stack = false
            output.append(scc)
        return v

    for vertex in graph
        if vertex not in table
            strong_connect(vertex)

    return output

